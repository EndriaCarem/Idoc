import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface Message {
  role: string;
  content: string;
}

interface RequestBody {
  messages: Message[];
  documentoOriginal: string;
  documentoFormatado: string;
  sugestoes: string[];
  alertas: string[];
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      messages, 
      documentoOriginal, 
      documentoFormatado, 
      sugestoes, 
      alertas 
    }: RequestBody = await req.json();

    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    // Construir contexto do sistema com informa√ß√µes do documento
    const systemPrompt = `Voc√™ √© um COPILOTO T√âCNICO especializado em relat√≥rios de incentivos fiscais brasileiros (Regime Automotivo, Lei de Inform√°tica, PPB, MOVER).

EXPERTISE:
- Formata√ß√£o e padroniza√ß√£o de documentos regulat√≥rios
- Conformidade com requisitos de presta√ß√£o de contas
- An√°lise t√©cnica de projetos de P&D e inova√ß√£o
- Conhecimento profundo da legisla√ß√£o brasileira de incentivos fiscais

CONTEXTO DO DOCUMENTO EM AN√ÅLISE:

üìÑ DOCUMENTO ORIGINAL (amostra):
${documentoOriginal.substring(0, 1200)}
[...]

üìù DOCUMENTO FORMATADO (amostra):
${documentoFormatado.substring(0, 1200)}
[...]

‚úÖ FORMATA√á√ïES APLICADAS (${sugestoes.length} itens):
${sugestoes.map((s, i) => `${i + 1}. ${s}`).join('\n')}

‚ö†Ô∏è ALERTAS DE CONFORMIDADE IDENTIFICADOS (${alertas.length} itens):
${alertas.map((a, i) => `${i + 1}. ${a}`).join('\n')}

COMO VOC√ä PODE AJUDAR:
1. **Melhorias de Texto**: Sugerir reformula√ß√µes para clareza, precis√£o t√©cnica e conformidade
2. **An√°lise de Conformidade**: Validar se trechos atendem aos requisitos regulat√≥rios
3. **Corre√ß√µes Espec√≠ficas**: Revisar se√ß√µes, tabelas, nomenclaturas e refer√™ncias normativas
4. **Esclarecimentos**: Explicar alertas, requisitos e melhores pr√°ticas
5. **Sugest√µes Contextuais**: Recomendar melhorias baseadas no tipo de regime fiscal

DIRETRIZES DE RESPOSTA:
- Seja OBJETIVO e T√âCNICO, sem prolixidade
- Priorize CONFORMIDADE REGULAT√ìRIA sobre prefer√™ncias estil√≠sticas
- Cite SEMPRE que poss√≠vel as normativas aplic√°veis (leis, portarias, instru√ß√µes normativas)
- Use linguagem profissional adequada para analistas t√©cnicos
- Forne√ßa respostas ACION√ÅVEIS com passos concretos
- Quando aplic√°vel, sugira texto formatado pronto para uso

IMPORTANTE: Voc√™ est√° auxiliando profissionais qualificados. Suas respostas devem ser precisas, fundamentadas e diretamente aplic√°veis ao contexto regulat√≥rio brasileiro.`;

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages
        ],
        temperature: 0.7,
        max_tokens: 1000
      }),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ 
            error: 'Limite de requisi√ß√µes excedido. Por favor, aguarde um momento e tente novamente.' 
          }),
          { 
            status: 429, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }
      
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ 
            error: 'Cr√©ditos insuficientes. Por favor, adicione cr√©ditos √† sua conta Lovable AI.' 
          }),
          { 
            status: 402, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }

      const errorText = await response.text();
      console.error('Erro na API Lovable AI:', response.status, errorText);
      throw new Error('Erro ao processar mensagem com IA');
    }

    const data = await response.json();
    const assistantResponse = data.choices[0]?.message?.content;

    if (!assistantResponse) {
      throw new Error('Resposta inv√°lida da IA');
    }

    return new Response(
      JSON.stringify({ response: assistantResponse }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Erro no chat-copilot:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
